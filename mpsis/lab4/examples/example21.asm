//В качестве примера возьмём число 12415. В двоичном виде: 0011_0000_0111_1111(16 бит до расширения) -> 0000_0000_0000_0000_0011_0000_0111_1111(32 бит после расширения).
//Тогда чтобы извлечь, а затем просуммировать первые 4 четырёх битных сегментов создадим логические маски:
//1.0000_0000_0000_0000_0000_0000_0000_1111(15)
//2.0000_0000_0000_0000_0000_0000_1111_0000(240)
//3.0000_0000_0000_0000_0000_1111_0000_0000(3840)
//4.0000_0000_0000_0000_1111_0000_0000_0000(61440)
//Применяем логическое И между значением с внешнего устройства и каждой логической маской. 
//Результат кладём в разные регистры, а затем просто суммируем


//J B WS ALUop  RA1   RA2   const     WA
  0 0 10   00000000000000000000000  00001  // загрузить значение с входа sw_i в регистр 1
  0 0 00   00000000000000000001111  00010 // // загрузить константу 15 регистр 2
  0 0 00   00000000000000011110000  00011 // // загрузить константу 240 регистр 3  
  0 0 00   00000000000111100000000  00100 // // загрузить константу 3840 регистр 4
  0 0 00   00000001111000000000000  00101 // // загрузить константу 61440 регистр 5

//J B WS ALUop  RA1   RA2   const     WA
  0 0 10   00000000000000000000100  00110 // загрузить константу 4 регистр 6
  0 0 10   00000000000000000001000  00111 // загрузить константу 8 регистр 7
  0 0 10   00000000000000000001100  01000 // загрузить константу 12 регистр 8


//J B WS ALUop  RA1   RA2   const     WA
  0 0 01 00111 00001 00010 00000000 00010  // логическое И регистра 1 с регистром 2 и поместить результат в регистр 2
 
  0 0 01 00111 00001 00011 00000000 00011  // логическое И регистра 1 с регистром 3 и поместить результат в регистр 3
  0 0 01 00101 00011 00110 00000000 00011  // арфмитический сдвиг вправо значения в 3 регистре на значение в 6 регистре и записать результат в 3 регистр

  0 0 01 00111 00001 00100 00000000 00100 // логическое И регистра 1 с регистром 4 и поместить результат в регистр 4
  0 0 01 00101 00100 00111 00000000 00100 // арфмитический сдвиг вправо значения в 4 регистре на значение в 7 регистре и записать результат в 4 регистр    
 
  0 0 01 00111 00001 00101 00000000 00101 // логическое И регистра 1 с регистром 5 и поместить результат в регистр 5
  0 0 01 00101 00101 01000 00000000 00101 // арфмитический сдвиг вправо значения в 5 регистре на значение в 8 регистре и записать результат в 5 регистр
  

//J B WS ALUop  RA1   RA2   const     WA
  0 0 01 00000 00000 00010 00000000 00001  // сложить регистр 0 с регистром 2 и поместить результат в регистр 1  
  0 0 01 00000 00001 00010 00000000 00001  // сложить регистр 1 с регистром 2 и поместить результат в регистр 1
  0 0 01 00000 00001 00010 00000000 00001  // сложить регистр 1 с регистром 3 и поместить результат в регистр 1
  0 0 01 00000 00001 00100 00000000 00001  // сложить регистр 1 с регистром 4 и поместить результат в регистр 1
  0 0 01 00000 00001 00101 00000000 00001  // сложить регистр 1 с регистром 5 и поместить результат в регистр 1
  1 0 00 00000 00001 00000 00000000 00000  // бесконечное повторение этой инструкции с выводом на out_o значения в регистре 1
